name: Build custom n8n (precompile -> image)

on:
  push:
    branches: [ "master" ]
    tags: [ "v*", "release-**" ]
  workflow_dispatch:

env:
  IMAGE_NAME: custom-n8n

jobs:
  # 1) Compile the app outside Docker to ./compiled
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      # Corepack makes pnpm available
      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare pnpm@9.12.3 --activate
          echo "TURBO_TELEMETRY_DISABLED=1" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--max-old-space-size=8192" >> $GITHUB_ENV

      - name: Install deps
        run: pnpm install --frozen-lockfile

      # n8n added a helper for Docker builds; if not present in your version,
      # fall back to: pnpm build && pnpm --filter n8n build:docker
      - name: Build artifacts for Docker
        run: |
          if pnpm -w -s run | grep -q "^build:docker"; then
            pnpm build:docker
          else
            pnpm build
            # Some versions use this to create ./compiled
            node scripts/prepare.mjs || true
          fi
        env:
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Verify compiled folder
        run: test -d compiled && ls -la compiled

      - name: Upload compiled artifacts
        uses: actions/upload-artifact@v4
        with:
          name: n8n-compiled
          path: compiled

  # 2) Build the final Docker image (no pnpm build inside)
  image:
    needs: compile
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Download compiled
        uses: actions/download-artifact@v4
        with:
          name: n8n-compiled
          path: compiled

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
          labels: |
            org.opencontainers.image.title=custom-n8n
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      # Use the runtime Dockerfile that copies ./compiled (see below)
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/images/n8n-custom/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
