name: Build custom n8n (precompile -> image)

on:
  push:
    branches: [ "master" ]
    tags: [ "v*", "release-**" ]
  workflow_dispatch:

env:
  IMAGE_NAME: custom-n8n

jobs:
  # 1) Compile the app outside Docker to ./compiled
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Node 22
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Install pnpm (inherits version from package.json "packageManager")
      # IMPORTANT: Do NOT set 'version:' here, to avoid conflicts with packageManager.
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      # Cache pnpm store for speed
      - name: Use pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Configure env + pnpm
        run: |
          echo "TURBO_TELEMETRY_DISABLED=1" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--max-old-space-size=8192" >> $GITHUB_ENV
          pnpm config set store-dir ~/.pnpm-store
          pnpm -v
          node -v

      - name: Install deps
        run: pnpm install --frozen-lockfile

      # Produce ./compiled for the Docker runtime image
      - name: Build artifacts for Docker
        run: |
          if pnpm -w -s run | grep -q "^build:docker"; then
            pnpm build:docker
          else
            pnpm build
            node scripts/prepare.mjs || true
          fi
        env:
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Verify compiled folder
        run: |
          test -d compiled
          ls -la compiled

      - name: Upload compiled artifacts
        uses: actions/upload-artifact@v4
        with:
          name: n8n-compiled
          path: compiled

  # 2) Build the final Docker image (no pnpm build inside)
  image:
    needs: compile
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Download compiled
        uses: actions/download-artifact@v4
        with:
          name: n8n-compiled
          path: compiled

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
          labels: |
            org.opencontainers.image.title=custom-n8n
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/images/n8n-custom/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
